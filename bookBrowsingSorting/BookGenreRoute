```python
from flask import Flask, jsonify
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.ext.automap import automap_base
from flask import Flask, jsonify, request

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:1325@localhost:3306/bookstore'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Define the base for automap
Base = automap_base()

# Use application context for preparing the Base
with app.app_context():
    # Reflect the tables
    Base.prepare(autoload_with=db.engine)

# Define mapped classes
Authors = Base.classes.authors
Books = Base.classes.books
Publishers = Base.classes.publishers

# Home Route
@app.route('/')
def welcome():
    return "Welcome to the Bookstore API Access"

# Route to get all books
@app.route('/books', methods=['GET'])
def get_books():
    # Query the Books table for all books
    books_query = db.session.query(Books).all()

    # Convert query results to a list of dictionaries
    books_list = [
        {
            'BookID': book.BookID,
            'ISBN': book.ISBN,
            'Name': book.Name,
            'Description': book.Description,
            'Price': str(book.Price),  # Convert decimal to string for JSON serialization
            'Genre': book.Genre,
            'AuthorID': book.AuthorID,
            'PublisherID': book.PublisherID,
            'YearPublished': book.YearPublished,
            'CopiesSold': book.CopiesSold
        } for book in books_query
    ]

    # Return the results as JSON
    return jsonify(books_list)

# Route to get books by genre
@app.route('/books/genre', methods=['GET'])
def get_books_by_genre():
    # Get the genre from query parameter
    genre = request.args.get('genre')

    # Validate if genre parameter is provided
    if not genre:
        return jsonify({"error": "Missing genre parameter"}), 400

    # Query the Books table for books in the given genre
    books_query = db.session.query(Books).filter(Books.Genre == genre).all()

    # If no books found for the genre, return an empty list with a not found message
    if not books_query:
        return jsonify({"error": f"No books found for genre '{genre}'"}), 404

    # Convert query results to a list of dictionaries for JSON response
    books_list = [
        {
            'BookID': book.BookID,
            'ISBN': book.ISBN,
            'Name': book.Name,
            'Description': book.Description,
            'Price': str(book.Price),  # Convert decimal to string for JSON serialization
            'Genre': book.Genre,
            'AuthorID': book.AuthorID,
            'PublisherID': book.PublisherID,
            'YearPublished': book.YearPublished,
            'CopiesSold': book.CopiesSold
        } for book in books_query
    ]

    # Return the results as JSON
    return jsonify(books_list)

if __name__ == '__main__':
    app.run(debug=True)
